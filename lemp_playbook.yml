# Install PHP, Nginx, Composer, Redis, Supervisor, MySql, NVM
---
- hosts: localhost
  connection: local
  become: yes
  become_method: sudo
  vars:
    php_version: 8.1
    nvm_version: 0.40.3
    composer_version: 2.8.9
    db_root_user: root
    db_root_password: "yH$%hdiAC4XqC8Zz"
    db_root_host: localhost
  tasks:
    - name: Set timezone to America/Toronto
      timezone:
        name: America/Toronto

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes

    # Add Required Repositories
    - name: Add repositories ppa:ondrej/php
      apt_repository:
        repo: "ppa:ondrej/php"
        state: present

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes

    # Install Node and NPM with NVM
    - name: Install NVM
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install --lts
      args:
        executable: /bin/bash

    - name: Install software-properties-common
      apt:
        name: software-properties-common
        state: latest

    - name: Install Nginx
      apt: name=nginx state=latest

    - name: Install Redis package
      apt:
        name: redis-server
        state: present

    - name: Install Supervisor package
      apt:
        name: supervisor
        state: present

    - name: Install Let's Encrypt package
      apt:
        name:
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Install PHP {{ php_version }} and required modules
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - php{{ php_version }}
        - php{{ php_version }}-fpm
        - php{{ php_version }}-cli
        - php{{ php_version }}-common
        - php{{ php_version }}-mbstring
        - php{{ php_version }}-xml
        - php{{ php_version }}-curl
        - php{{ php_version }}-sqlite3
        - php{{ php_version }}-mysql
        - php{{ php_version }}-zip
        - php{{ php_version }}-bcmath
        - php{{ php_version }}-dom
        - php{{ php_version }}-gd
        - php{{ php_version }}-opcache
        - php{{ php_version }}-redis

    - name: Download and install Composer
      shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --version={{ composer_version }}
    - name: Move Composer to PATH
      shell: mv /usr/local/bin/composer /usr/bin/

    - name: Installing MariaDB server
      apt:
        name: mariadb-server
        state: present

    # MySQL Configuration

    - name: Check if MariaDB root user exists
      community.mysql.mysql_query:
        login_user: "{{ db_root_user }}"
        login_password: "{{ db_root_password }}"
        query: >
          SELECT User,Host FROM mysql.user
          WHERE User = '{{ db_root_user }}'
          AND Host = '{{ db_root_host }}'
      register: root_user_check

    - name: Create MariaDB root user if missing
      community.mysql.mysql_user:
        name: "{{ db_root_user }}"
        host: "{{ db_root_host }}"
        password: "{{ db_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        priv: "*.*:ALL,GRANT"
        state: present
      when: root_user_check.rowcount == 0

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ""
        host_all: yes
        state: absent
        login_user: "{{ db_root_user }}"
        login_password: "{{ db_root_password }}"

    - name: Removes the MariaDB test database
      mysql_db:
        name: test
        state: absent
        login_user: "{{ db_root_user  }}"
        login_password: "{{ db_root_password }}"

    # Restart services
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
        enabled: yes

    - name: Start Redis service
      service:
        name: redis-server
        state: restarted
        enabled: yes

    - name: Start and enable Supervisor service
      systemd:
        name: supervisor
        state: restarted
        enabled: yes

    - name: Start and enable Let's Encrypt
      systemd:
        name: certbot.timer
        state: restarted
        enabled: yes

    - name: Start and enable MariaDB service
      service:
        name: mariadb
        state: started
        enabled: yes
